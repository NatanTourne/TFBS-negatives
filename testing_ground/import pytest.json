import pytest
import numpy as np
from unittest import mock
from Negatives.TFBS_negatives import data as data_module
import pickle

# python

@pytest.fixture
def mock_h5_file():
    # Simulate a minimal HDF5 structure for one celltype and two TFs, 3 cross-val groups
    class DummyFile(dict):
        def __getitem__(self, key):
            return self[key]
    file = DummyFile()
    # Simulate 2 TFs + ATAC_peak
    prot_names = np.array([b"ATAC_peak", b"TF1", b"TF2"])
    # 9 positions, 3 for each cross-val group
    central = np.array([
        [1,1,1,1,1,1,1,1,1],  # ATAC_peak
        [1,0,0,1,0,0,1,0,0],  # TF1
        [0,1,0,0,1,0,0,1,0],  # TF2
    ])
    file["0/prot_names"] = prot_names
    file["central"] = central
    # Simulate chromosome assignment for cross-val groups
    chrs = np.array(["chr1", "chr2", "chr3", "chr1", "chr2", "chr3", "chr1", "chr2", "chr3"])
    file["1/peak_ix_to_chr"] = chrs
    file["1/peak_ix_to_pos"] = np.arange(9)
    file["1/peak_ix_to_len"] = np.full(9, 101)
    file["unstructured"] = {}
    return file

@pytest.mark.parametrize("DatasetClass", [
    data_module.HQ_dataset,
])
def test_crossval_positive_negative_counts(DatasetClass, mock_h5_file):
    TFs = ["TF1", "TF2"]
    celltype = "CELL"
    crossval_chrs = [["chr1"], ["chr2"], ["chr3"]]
    summary = {}
    for tf in TFs:
        summary[tf] = {}
        for i, subset in enumerate(crossval_chrs):
            ds = DatasetClass(mock_h5_file, tf, subset=subset)
            positives = int(np.sum(ds.central == 1))
            negatives = int(np.sum(ds.central == 0))
            summary[tf][f"cv_group_{i}"] = {"positives": positives, "negatives": negatives}
    # Check structure
    assert set(summary.keys()) == set(TFs)
    for tf in TFs:
        for i in range(3):
            assert "positives" in summary[tf][f"cv_group_{i}"]
            assert "negatives" in summary[tf][f"cv_group_{i}"]
    # Optionally, check values for the mock data
    assert summary["TF1"]["cv_group_0"]["positives"] == 3
    assert summary["TF1"]["cv_group_0"]["negatives"] == 0
    assert summary["TF2"]["cv_group_1"]["positives"] == 1
    assert summary["TF2"]["cv_group_1"]["negatives"] == 2

def test_summary_dict_save_load(tmp_path):
    test_dict = {"celltype": {"TF": {"cv_group_0": {"positives": 1, "negatives": 2}}}}
    file_path = tmp_path / "summary.pkl"
    with open(file_path, "wb") as f:
        pickle.dump(test_dict, f)
    with open(file_path, "rb") as f:
        loaded = pickle.load(f)
    assert loaded == test_dict